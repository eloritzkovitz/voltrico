services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
  
  mongo-db:
    image: mongo:6
    container_name: mongo-db
    ports:
      - "27017:27017"
    volumes:
      - mongo-db-data:/data/db
  
  order-db:
    image: postgres:16
    container_name: order-db
    environment:
      POSTGRES_DB: ${ORDER_DB_NAME}
      POSTGRES_USER: ${ORDER_DB_USER}
      POSTGRES_PASSWORD: ${ORDER_DB_PASSWORD}
    ports:
      - "5434:5432"
    volumes:
      - order-db-data:/var/lib/postgresql/data

  inventory-db:
    image: postgres:16
    container_name: inventory-db
    environment:
      POSTGRES_DB: ${INVENTORY_DB_NAME}
      POSTGRES_USER: ${INVENTORY_DB_USER}
      POSTGRES_PASSWORD: ${INVENTORY_DB_PASSWORD}
    ports:
      - "5435:5432"
    volumes:
      - inventory-db-data:/var/lib/postgresql/data

  user-service:
    build:
      context: .
      dockerfile: packages/services/user/Dockerfile
    ports:
      - "${USER_SERVICE_PORT}:3002"
    environment:
          PORT: ${USER_SERVICE_PORT}
          DB_CONNECTION: ${USER_DB_CONNECTION}
          TOKEN_SECRET: ${TOKEN_SECRET}
          TOKEN_EXPIRES: ${TOKEN_EXPIRES}
          REFRESH_TOKEN_EXPIRES: ${REFRESH_TOKEN_EXPIRES}          
          GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
          RABBITMQ_URL: ${RABBITMQ_URL}
          NOTIFICATIONS_QUEUE: ${NOTIFICATIONS_QUEUE}
    depends_on:
      - rabbitmq:
          condition: service_healthy
      - mongo-db

  product-service:
    build:
      context: .
      dockerfile: packages/services/product/Dockerfile
    ports:
      - "${PRODUCT_SERVICE_PORT}:3003"
    environment:
      PORT: ${PRODUCT_SERVICE_PORT}
      DB_CONNECTION: ${PRODUCT_DB_CONNECTION}
      RABBITMQ_URL: ${RABBITMQ_URL}      
    depends_on:
      - rabbitmq:
          condition: service_healthy
      - mongo-db

  cart-service:
    build:
      context: .
      dockerfile: packages/services/cart/Dockerfile
    ports:
      - "${CART_SERVICE_PORT}:3004"
    environment:
      PORT: ${CART_SERVICE_PORT}
      DB_CONNECTION: ${CART_DB_CONNECTION}
      RABBITMQ_URL: ${RABBITMQ_URL}
      NOTIFICATIONS_QUEUE: ${NOTIFICATIONS_QUEUE}
    depends_on:
      - rabbitmq:
          condition: service_healthy
      - mongo-db

  order-service:
    build:
      context: .
      dockerfile: packages/services/order/Dockerfile
    ports:
      - "${ORDER_SERVICE_PORT}:3005"
    environment:
      PORT: ${ORDER_SERVICE_PORT}
      DB_HOST: ${ORDER_DB_HOST}
      DB_PORT: ${ORDER_DB_PORT}
      DB_USER: ${ORDER_DB_USER}
      DB_PASSWORD: ${ORDER_DB_PASSWORD}
      DB_NAME: ${ORDER_DB_NAME}
      RABBITMQ_URL: ${RABBITMQ_URL}
    depends_on:
      - rabbitmq:
          condition: service_healthy
      - order-db 
  
  inventory-service:
    build:
      context: .
      dockerfile: packages/services/inventory/Dockerfile
    ports:
      - "${INVENTORY_SERVICE_PORT}:3006"
    environment:
      PORT: ${INVENTORY_SERVICE_PORT}
      DB_HOST: ${INVENTORY_DB_HOST}
      DB_PORT: ${INVENTORY_DB_PORT}
      DB_USER: ${INVENTORY_DB_USER}
      DB_PASSWORD: ${INVENTORY_DB_PASSWORD}
      DB_NAME: ${INVENTORY_DB_NAME}
      RABBITMQ_URL: ${RABBITMQ_URL}
    depends_on:
      - rabbitmq:
          condition: service_healthy
      - inventory-db
  
  search-service:
    build:
      context: .
      dockerfile: packages/services/search/Dockerfile
    ports:
      - "${SEARCH_SERVICE_PORT}:3007"
    environment:
      PORT: ${SEARCH_SERVICE_PORT}
      ELASTIC_URL: ${ELASTIC_URL}
      RABBITMQ_URL: ${RABBITMQ_URL}
    depends_on:
      - rabbitmq:
          condition: service_healthy
      - elasticsearch

  api-gateway:
    build:
      context: .
      dockerfile: packages/api-gateway/Dockerfile
    ports:
    - "${API_GATEWAY_PORT}:3001"
    depends_on:
      - user-service
      - product-service
      - cart-service
      - order-service
      - inventory-service
    environment:
      USER_SERVICE_URL: ${USER_SERVICE_URL}
      PRODUCT_SERVICE_URL: ${PRODUCT_SERVICE_URL}
      CART_SERVICE_URL: ${CART_SERVICE_URL}
      ORDER_SERVICE_URL: ${ORDER_SERVICE_URL}
      INVENTORY_SERVICE_URL: ${INVENTORY_SERVICE_URL}
      SEARCH_SERVICE_URL: ${SEARCH_SERVICE_URL}

  web:
    build:
      context: .
      dockerfile: packages/web/Dockerfile
      args:
        NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL}
        NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${NEXT_PUBLIC_GOOGLE_CLIENT_ID}
    environment:
      NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL}
      NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${NEXT_PUBLIC_GOOGLE_CLIENT_ID}
    ports:
      - "${WEB_PORT}:80"
    depends_on:
      - api-gateway

volumes:
  mongo-db-data:
  order-db-data:
  inventory-db-data:  
  elasticsearch-data: